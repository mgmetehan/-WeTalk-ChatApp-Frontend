[{"D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\index.js":"1","D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\App.js":"2","D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\components\\ChatRoom.js":"3","D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\components\\Chat.js":"4"},{"size":220,"mtime":1642401236000,"results":"5","hashOfConfig":"6"},{"size":148,"mtime":1642401236000,"results":"7","hashOfConfig":"6"},{"size":5647,"mtime":1668877588558,"results":"8","hashOfConfig":"6"},{"size":2868,"mtime":1668877560218,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gwazq1",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\index.js",[],"D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\App.js",[],"D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\components\\ChatRoom.js",["20"],"import React, { useEffect, useState } from 'react'\nimport { Chat } from './Chat'\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient = null;\n\nconst ChatRoom = () => {\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n    });\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [tab, setTab] = useState(\"CHATROOM\");\n\n    useEffect(() => {\n        console.log(userData);\n    }, [userData]);\n\n    const userJoin = () => {\n        var chatMessage = {\n            senderName: userData.username,\n            status: \"JOIN\"\n        };\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n\n    const onMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"JOIN\":\n                if (!privateChats.get(payloadData.senderName)) {\n                    privateChats.set(payloadData.senderName, []);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    }\n\n    const onPrivateMessage = (payload) => {\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if (privateChats.get(payloadData.senderName)) {\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        } else {\n            let list = [];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName, list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n\n    const handleMessage = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, \"message\": value });\n    }\n    const sendValue = (e) => {\n        e.preventDefault();\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status: \"MESSAGE\"\n            };\n            console.log(chatMessage);\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n            setUserData({ ...userData, \"message\": \"\" });\n        }\n    }\n\n    const sendPrivateValue = (e) => {\n        e.preventDefault();\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName: tab,\n                message: userData.message,\n                status: \"MESSAGE\"\n            };\n\n            if (userData.username !== tab) {\n                privateChats.get(tab).push(chatMessage);\n                setPrivateChats(new Map(privateChats));\n            }\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n            setUserData({ ...userData, \"message\": \"\" });\n        }\n    }\n\n    const handleInputChange = (field) => (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, [field]: value });\n    }\n\n    const connect = () => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError);\n    }\n\n    const onConnected = () => {\n        setUserData({ ...userData, \"connected\": true });\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const onError = (err) => {\n        console.log(err);\n\n    }\n\n    const registerUser = (event) => {\n        event.preventDefault();\n        connect();\n    }\n\n    return (\n        <div className=\"container\">\n            {userData.connected ?\n                <Chat\n                    userData={userData}\n                    setUserData={setUserData}\n                    stompClient={stompClient}\n                    privateChats={privateChats}\n                    publicChats={publicChats}\n                    tab={tab}\n                    setTab={setTab}\n                    handleMessage={handleMessage}\n\n                    sendValue={sendValue}\n                    sendPrivateValue={sendPrivateValue}\n                />\n                :\n                <>\n                    <div class=\"background\">\n                        <div class=\"shape\"></div>\n                        <div class=\"shape\"></div>\n                    </div>\n                    <form className='register-form' onSubmit={registerUser}>\n                        <h3>Login Here</h3>\n\n                        <label for=\"username\">Username</label>\n                        <input type=\"text\" placeholder=\"Email or Phone\" id=\"username\" value={userData.username} onChange={handleInputChange('username')} />\n\n                        <label for=\"password\">Password</label>\n                        <input type=\"password\" placeholder=\"Password\" id=\"password\" value={userData.username} onChange={handleInputChange('password')} />\n\n                        <button type='submit'>Log In</button>\n                        <div class=\"social\">\n                            <div class=\"go\"><i class=\"fab fa-google\"></i>  Google</div>\n                            <div class=\"fb\"><i class=\"fab fa-facebook\"></i>  Facebook</div>\n                        </div>\n                    </form>\n                </>\n\n\n            }\n        </div>\n    )\n}\n\nexport default ChatRoom","D:\\IdeaWorkSpace\\WeTalk-ChatApp-Frontend\\we-talk\\src\\components\\Chat.js",["21"],"import React, { useState } from 'react';\r\n\r\nexport const Chat = ({ userData, setUserData, stompClient, privateChats\r\n    , publicChats, setTab, tab, handleMessage, sendValue, sendPrivateValue }) => {\r\n\r\n    return (\r\n        <div className=\"chat-box\">\r\n            <div className=\"member-list\">\r\n                <ul>\r\n                    <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\r\n                    {[...privateChats.keys()].map((name, index) => (\r\n                        <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n                <ul className=\"chat-messages\">\r\n                    {publicChats.map((chat, index) => (\r\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                            <div className=\"message-data\">{chat.message}</div>\r\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n\r\n                <form onSubmit={sendValue} className=\"send-message\">\r\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\r\n                    <button type=\"submit\" className=\"send-button-public\" >send</button>\r\n                </form>\r\n            </div>}\r\n            {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n                <ul className=\"chat-messages\">\r\n                    {[...privateChats.get(tab)].map((chat, index) => (\r\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                            <div className=\"message-data\">{chat.message}</div>\r\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n\r\n                <form onSubmit={sendPrivateValue} className=\"send-message\">\r\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\r\n                    <button className=\"send-button-private\" type='submit'>send</button>\r\n                </form>\r\n            </div>}\r\n        </div>\r\n    )\r\n}",{"ruleId":"22","severity":1,"message":"23","line":33,"column":9,"nodeType":"24","messageId":"25","endLine":44,"endColumn":10},{"ruleId":"26","severity":1,"message":"27","line":1,"column":17,"nodeType":"28","messageId":"29","endLine":1,"endColumn":25},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]